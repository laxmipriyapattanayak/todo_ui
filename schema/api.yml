openapi: 3.0.3
info:
  title: ToDo Application API
  description: API for managing users, tasks, and tags in a ToDo application
  version: 1.0.0
servers:
  - url: http://localhost:8080/todo

components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
          format: email
        passwordHash:
          type: string
      required:
        - username
        - email
        - passwordHash

    UserUpdate:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
          format: email
        passwordHash:
          type: string
      required:
        - userId
        - username
        - email
        - passwordHash

    UserPatch:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
          format: email
        passwordHash:
          type: string

    TaskStatus:
      type: string
      enum:
        - PENDING
        - IN_PROGRESS
        - COMPLETED

    Task:
      type: object
      properties:
        taskId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        status:
          $ref: "#/components/schemas/TaskStatus"
        date:
          type: string
          format: date
        time:
          type: string
          format: time
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagReference"
      required:
        - title
        - date
        - tags

    TaskUpdate:
      type: object
      properties:
        taskId:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        status:
          $ref: "#/components/schemas/TaskStatus"
        date:
          type: string
          format: date
        time:
          type: string
          format: time
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagReference"
      required:
        - taskId
        - title
        - date
        - tags

    TaskPatch:
      type: object
      properties:
        taskId:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        status:
          $ref: "#/components/schemas/TaskStatus"
        date:
          type: string
          format: date
        time:
          type: string
          format: time
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagReference"

    TaskRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          $ref: "#/components/schemas/TaskStatus"
        date:
          type: string
          format: date
        time:
          type: string
          format: time
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagReference"
      required:
        - title
        - date

    TagReference:
      type: object
      properties:
        taskId:
          type: integer
          format: int64
        tagId:
          type: integer
          format: int64
      required:
        - tagId

    TagTask:
      type: array
      items:
        $ref: "#/components/schemas/Task"

    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      required:
        - id
        - name

    TagUpdate:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      required:
        - id
        - name

    TagPatch:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string

    TagRequest:
      type: object
      properties:
        name:
          type: string
      required:
        - name

paths:
  /users:
    get:
      summary: Get all users
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /users/{userId}:
    get:
      summary: Get a user by ID
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found

    put:
      summary: Update a user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found

    patch:
      summary: Partial Update a user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPatch"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found

    delete:
      summary: Delete a user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: User deleted successfully
        "404":
          description: User not found

  /{userId}/tasks:
    get:
      summary: Get all tasks
      parameters:
        - name: filter
          in: query
          schema:
            enum:
              - TODAY_TODO
              - TOMORROW_TODO
              - CURRENT_WEEK_TODO
              - LAST_WEEK_TODO
              - NEXT_WEEK_TODO
              - LAST_MONTH
              - CURRENT_MONTH
              - NEXT_MONTH

      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
    post:
      summary: Create a new task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskRequest"
      responses:
        "201":
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /{userId}/tasks/{taskId}:
    get:
      summary: Get a task by ID
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "404":
          description: Task not found

    put:
      summary: Update a task
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskUpdate"
      responses:
        "200":
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "404":
          description: Task not found

    patch:
      summary: Partial Update a task
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskPatch"
      responses:
        "200":
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "404":
          description: Task not found

    delete:
      summary: Delete a task
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Task deleted successfully
        "404":
          description: Task not found

  /{userId}/tags:
    get:
      summary: Get all tags
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
    post:
      summary: Create a new tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagRequest"
      responses:
        "201":
          description: Tag created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"

  /{userId}/tags/{tagId}:
    get:
      summary: Get a tag by ID
      parameters:
        - in: path
          name: tagId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "404":
          description: Tag not found

    put:
      summary: Update a tag
      parameters:
        - in: path
          name: tagId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagUpdate"
      responses:
        "200":
          description: Tag updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "404":
          description: Tag not found

    patch:
      summary: Partial Update a tag
      parameters:
        - in: path
          name: tagId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagPatch"
      responses:
        "200":
          description: Tag updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "404":
          description: Tag not found

    delete:
      summary: Delete a tag
      parameters:
        - in: path
          name: tagId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Tag deleted successfully
        "404":
          description: Tag not found

  /{userId}/tags/{tagId}/tasks:
    get:
      summary: Get tasks by tagId
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: tagId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagTask"
        "404":
          description: Tag not found
